//Update July 18, 2022
//Update July 21, 2022

//Author: Africa Flores-Anderson
//Contact: africa.flores-anderson@mail.mcgill.ca 

/*
Note: For years 2019 to present this is script will work for runs at the national and sub-national scale level.
For a broader geographic extent run script in sub-sections. 
*/

/**** Total Area of Interest - Tropics ****/
var tropics = ee.FeatureCollection("projects/sentinelati-1547136065067/assets/tropics_dissolved");
var forest = ee.Image("projects/sentinelati-1547136065067/assets/2010ForestMask_Tropics");

// Get a palette: a list of hex strings
var palettes = require('users/gena/packages:palettes');
var palette = palettes.kovesi.rainbow_bgyr_35_85_c72[7];
 
/**************************************************/

//Input parameters
/***************These are the parameters to change****************************************/
var countries = ee.FeatureCollection("USDOS/LSIB_SIMPLE/2017");
var country = tropics  

var CloudCoverThresholdS2 = 40;
var theYear = 2018;
var CLD_PRB_THRESH = 65
var NIR_DRK_THRESH = 0.15
var CLD_PRJ_DIST = 1
var BUFFER = 50
/***************End of the parameters to change****************************************/


//Image Collections

var CL7 = ee.ImageCollection('LANDSAT/LE07/C02/T1_L2')
         .filterDate(theYear + '-01-01', theYear + '-12-31');
var CL5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
//LANDSAT/LT05/C02/T1_L2
         .filterDate(theYear + '-01-01', theYear + '-12-31');
var CL8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
//LANDSAT/LT05/C02/T1_L2
         .filterDate(theYear + '-01-01', theYear + '-12-31');
         
var S2 = ee.ImageCollection('COPERNICUS/S2_SR')

// Applies scaling factors for Landsat. Just for visualization and checking cloud masks
function applyScaleFactors(image) {
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBand = image.select('ST_B.*').multiply(0.00341802).add(149.0);
  return image.addBands(opticalBands, null, true)
              .addBands(thermalBand, null, true);
}

var CL7dataset = CL7.map(applyScaleFactors);
var CL5dataset = CL5.map(applyScaleFactors);
var CL8dataset = CL8.map(applyScaleFactors);

//following this https://d9-wret.s3.us-west-2.amazonaws.com/assets/palladium/production/s3fs-public/media/files/LSDS-1618_Landsat-4-7_C2-L2-ScienceProductGuide-v4.pdf


// PIXEL QUALITY MASKING for Landsat data 

function maskLclouds(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively.
  var cloudShadowBitMask = 1 << 3
  var cloudsBitMask = 1 << 4

  // Get the pixel QA band.
  var qa = image.select('QA_PIXEL')

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
      .and(qa.bitwiseAnd(cloudsBitMask).eq(0))

  // Return the masked image, scaled to TOA reflectance, without the QA bands.
  return image.updateMask(mask)
      //.select('SR_B.').multiply(0.0000275).add(-0.2)
      .copyProperties(image, ["system:time_start"])
}
//////// End function for cloud masking of Landsat data 

////// s2 cloudless algorithm ///////
  function get_s2_sr_cld_col(aoi, theYear) {
      // # Import and filter S2 SR.
      var s2_sr_col = (S2
          .filterBounds(aoi)
          .filterDate(theYear + '-01-01', theYear + '-12-31')
          .filter(ee.Filter.lte('CLOUDY_PIXEL_PERCENTAGE', CloudCoverThresholdS2)))
  
      // # Import and filter s2cloudless.
      var s2_cloudless_col = (ee.ImageCollection('COPERNICUS/S2_CLOUD_PROBABILITY')
          .filterBounds(aoi)
          .filterDate(theYear + '-01-01', theYear + '-12-31'))
  
      // # Join the filtered s2cloudless collection to the SR collection by the 'system:index' property.
      return ee.ImageCollection(ee.Join.saveFirst('s2cloudless').apply({
          'primary': s2_sr_col,
          'secondary': s2_cloudless_col,
          'condition': ee.Filter.equals({
              'leftField': 'system:index',
              'rightField': 'system:index'
          })
      }))
  }
  
  function add_cloud_bands(img) {
      // # Get s2cloudless image, subset the probability band.
      var cld_prb = ee.Image(img.get('s2cloudless')).select('probability')
  
      // # Condition s2cloudless by the probability threshold value.
      var is_cloud = cld_prb.gt(CLD_PRB_THRESH).rename('clouds')
  
      // # Add the cloud probability layer and cloud mask as image bands.
      return img.addBands(ee.Image([cld_prb, is_cloud]))
              
      
  }
  
  function add_shadow_bands(img) {
      // # Identify water pixels from the SCL band.
      var not_water = img.select('SCL').neq(6)
  
      // # Identify dark NIR pixels that are not water (potential cloud shadow pixels).
      var SR_BAND_SCALE = 1e4
      var dark_pixels = img.select('B8').lt(NIR_DRK_THRESH*SR_BAND_SCALE).multiply(not_water).rename('dark_pixels')
  
      // # Determine the direction to project cloud shadow from clouds (assumes UTM projection).
      var shadow_azimuth = ee.Number(90).subtract(ee.Number(img.get('MEAN_SOLAR_AZIMUTH_ANGLE')));
  
      // # Project shadows from clouds for the distance specified by the CLD_PRJ_DIST input.
      var cld_proj = (img.select('clouds').directionalDistanceTransform(shadow_azimuth, CLD_PRJ_DIST*10)
          .reproject({'crs': img.select(0).projection(), 'scale': 100})
          .select('distance')
          .mask()
          .rename('cloud_transform'))
  
      // # Identify the intersection of dark pixels with cloud shadow projection.
      var shadows = cld_proj.multiply(dark_pixels).rename('shadows')
  
      // # Add dark pixels, cloud projection, and identified shadows as image bands.
      return img.addBands(ee.Image([dark_pixels, cld_proj, shadows]))
              
  }
  
  function add_cld_shdw_mask(img) {
      // # Add cloud component bands.
      var img_cloud = add_cloud_bands(img)
  
      // # Add cloud shadow component bands.
      var img_cloud_shadow = add_shadow_bands(img_cloud)
  
      // # Combine cloud and shadow mask, set cloud and shadow as value 1, else 0.
      var is_cld_shdw = img_cloud_shadow.select('clouds').add(img_cloud_shadow.select('shadows')).gt(0)
  
      // # Remove small cloud-shadow patches and dilate remaining pixels by BUFFER input.
      // # 20 m scale is for speed, and assumes clouds don't require 10 m precision.
      is_cld_shdw = (is_cld_shdw.focal_min(2).focal_max(BUFFER*2/20)
          .reproject({'crs': img.select([0]).projection(), 'scale': 20})
          .rename('cloudmask'))
  
      // # Add the final cloud-shadow mask to the image.
      return img_cloud_shadow.addBands(is_cld_shdw)
                             .copyProperties(img, ["system:time_start"])
  }
  
  function apply_cld_shdw_mask(img) {
      // # Subset the cloudmask band and invert it so clouds/shadow are 0, else 1.
      var not_cld_shdw = img.select('cloudmask').not()
  
      // # Subset reflectance bands and update their masks, return the result.
      return img.select('B.*').updateMask(not_cld_shdw).divide(1000)
                 .copyProperties(img, ["system:time_start"])
  }
  ///// END OF S2CLOUDLESS /////
  

//Apply cloud masking to all Image Collections 
var CL7Clean = CL7dataset.map(maskLclouds)
                      .filterBounds(country)
var CL5Clean = CL5dataset.map(maskLclouds)
                      .filterBounds(country)
var CL8Clean = CL8dataset.map(maskLclouds)
                      .filterBounds(country)
var S2Clean = get_s2_sr_cld_col(country, theYear)
                  .map(add_cld_shdw_mask)
                  .map(apply_cld_shdw_mask)
///////////

/////Dealing with dates for each image
///Functions to change image to DOY info and add Date as band

function addDates(image){
  var doy = image.date().getRelative('day', 'year');
  var doyBand = ee.Image.constant(doy).add(ee.Image.constant(1)).uint16().rename('doy')
  doyBand = doyBand.updateMask(image.select('constant').mask())
  return image.addBands(doyBand).set('system:time_start', image.get('system:time_start'));
};
      
//Function to avoid double counting and perform spatial analysis 
var EPOCH = ee.Date('1979-01-01')
function DateLayer(image) {
  var mask = image.mask().reduce(ee.Reducer.min())
  var days = image.date().difference(EPOCH, 'day')
  return ee.Image.constant(days).int()
      .clip(image.geometry())
      .updateMask(mask)
      .copyProperties(image, ["system:time_start"])
}

///End functions Date information

//Create Image collections with date information as image values 
var CL7_date = CL7Clean.map(DateLayer)
                        .filterBounds(country)
var CL8_date = CL8Clean.map(DateLayer)
                        .filterBounds(country)
var S2_date = S2Clean.map(DateLayer)
                     .filterBounds(country)
                     
//print('Collection L7 date 1', CL7_date)


////


//Calculate valid observations per collection - it reduces to an image- when calculating
function counting(image){
  return image.reduce(ee.Reducer.countDistinct()).rename('valid_obs')
                            .clip(country)
}
                            
var L7_valid_obs = counting(CL7_date).unmask().clip(country)

var L8_valid_obs = counting(CL8_date).unmask().clip(country)

var S2_valid_obs = counting(S2_date).unmask().clip(country)

//for all Landsat data 
var L_valid_obs = L7_valid_obs.add(L8_valid_obs)

//for all available optical data (Landsat and Sentinel2)
var all_valid_obs = L_valid_obs.add(S2_valid_obs)

print(L_valid_obs.projection(), 'projection landsat')
print(all_valid_obs.projection(), 'projection all')
print(S2_valid_obs.projection(), 'projection_sentinel')
 
print(L7_valid_obs, 'L7 valid obs')
print(L8_valid_obs, 'L8 valid obs')
print(S2_valid_obs, 'S2 valid obs')

////Clip extent to Forest Mask 
Map.addLayer(forest, {}, 'Forest mask ');

var L7_validObs_clip = L7_valid_obs.updateMask(forest)
var L8_validObs_clip = L8_valid_obs.updateMask(forest)
var S2_validObs_clip = S2_valid_obs.updateMask(forest)

//Map.addLayer(L7_validObs_clip, {}, 'L7_validObs_clip');


var visualization = {
  bands: ['SR_B7', 'SR_B4', 'SR_B3'],
  min: 0.0,
  max: 0.3,
};

Map.setCenter(-22.97, 4.61, 3);

//original
//Map.addLayer(CL8dataset, visualization, 'False color Landsat 8 original');
//Map.addLayer(CL7dataset, visualization, 'False color Landsat 7 original');
//Map.addLayer(CL5dataset, visualization, 'False color Landsat 5 original');
//cloud mask applied
//Map.addLayer(CL7Clean, visualization, 'False Color Landsat 7 Clean');
//Map.addLayer(CL5Clean, visualization, 'False Color Landsat 5 Clean');
//Map.addLayer(CL8Clean, visualization, 'False Color Landsat 8 Clean');

//Mapping layers
Map.addLayer(L_valid_obs, {min: 0, max: 40, palette: palette}, 'Landsat Valid observations for year  ' + theYear);

Map.addLayer(S2_valid_obs, {min: 0, max: 40, palette: palette}, 'Sentinel Valid observations for year ' + theYear);

Map.addLayer(all_valid_obs, {min: 0, max: 40, palette: palette}, 'All Valid observations for year  ' + theYear);

//Export data as asset
// Export the image to an Earth Engine asset.

Export.image.toAsset({
  image: L_valid_obs,
  description: 'LandsatValidObs' + theYear,
  assetId: 'Landsat_ValidObs'+theYear,
  crs: 'EPSG:4326',
  scale: 30,
  region: country,
  maxPixels: 460945551708,
  
});

Export.image.toAsset({
  image: all_valid_obs,
  description: 'allvalidobs' + theYear,
  assetId: 'all_ValidObs'+theYear,
  crs: 'EPSG:4326',
  scale: 30,
  region: country,
  maxPixels: 460945551708,
});

Export.image.toAsset({
  image: S2_valid_obs,
  description: 's2validobs' + theYear,
  assetId: 'S2_ValidObs'+theYear,
  crs: 'EPSG:4326',
  scale: 30,
  region: country,
  maxPixels: 460945551708,
});